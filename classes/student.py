# Позволяет использовать типы (например, Lecturer), 
# которые ещё не определены на момент загрузки файла.
# Это защищает от циклического импорта student <-> mentor
from __future__ import annotations
from typing import List, Dict


class Student:
    # Статический атрибут (общий для всех студентов)
    # В него добавляется каждый новый экземпляр класса Student.
    all_students_list: List["Student"] = []

    def __init__(self, name: str, surname: str, gender: str):
        """
        Конструктор класса Student.
        Каждый студент имеет имя, фамилию, пол, 
        списки текущих и завершённых курсов, 
        а также словарь оценок.
        """
        self.name = name
        self.surname = surname
        self.gender = gender

        # Курсы, которые студент уже завершил
        self.finished_courses: List[str] = []

        # Курсы, которые студент сейчас проходит
        self.courses_in_progress: List[str] = []

        # Оценки за домашние задания.
        # Формат: {'Python': [8, 10, 9], 'Java': [7, 9]}
        self.grades: Dict[str, List[int]] = {}

        # Каждый созданный студент автоматически 
        # добавляется в общий список студентов
        Student.all_students_list.append(self)

    # --------------------------------------------
    # Универсальный метод подсчёта среднего балла
    # --------------------------------------------
    @staticmethod
    def calc_average(grades: Dict[str, List[int]]) -> float:
        """
        Получает на вход словарь с оценками по курсам
        (ключи — курсы, значения — списки оценок).
        Возвращает среднюю оценку со всех курсов.
        """
        # Извлекаем все оценки воедино (в один общий список)
        all_grades = [g for grades_list in grades.values() for g in grades_list]

        # Если список пуст — возвращаем 0.0, иначе считаем среднее
        return round(sum(all_grades) / len(all_grades), 2) if all_grades else 0.0

    # ---------------------------------------------------
    # Студент может оценить лектора по 10-балльной шкале
    # ---------------------------------------------------
    def rate_lecture(self, lecturer: Lecturer, course: str, grade: int):
        """
        Студент ставит оценку лектору, если:
        1. Этот лектор действительно является объектом класса Lecturer
        2. Студент проходит данный курс
        3. Лектор закреплён за этим курсом
        """

        # Импортируем класс Lecturer только внутри метода, 
        # чтобы избежать циклического импорта
        from classes.mentor import Lecturer

        # Проверяем, что оценка корректная (1–10)
        if not (1 <= grade <= 10):
            print("Ошибка: недопустимая оценка (должна быть от 1 до 10)")
            return "Ошибка"

        # Проверяем, что:
        # - лектор действительно экземпляр Lecturer
        # - курс есть и у лектора, и у студента
        if isinstance(lecturer, Lecturer) and course in lecturer.courses_attached and course in self.courses_in_progress:
            # Если курс уже есть в словаре лектора, добавляем оценку
            # иначе создаём новый список
            lecturer.grades.setdefault(course, []).append(grade)
        else:
            # Если одно из условий не выполнено — возвращаем ошибку
            print("Ошибка: курс не найден или лектор не привязан")
            return "Ошибка"

    # ---------------------------------------------------------
    # Расчёт средней оценки конкретного студента по всем курсам
    # ---------------------------------------------------------
    def average_grade(self) -> float:
        """
        Возвращает среднюю оценку за все курсы студента.
        """
        return Student.calc_average(self.grades)

    # ---------------------------------------------------------
    # Сравнение студентов по средним оценкам (больше чем >)
    # ---------------------------------------------------------
    def __gt__(self, other: "Student") -> bool:
        """
        Сравнение студентов по средней оценке.
        Возвращает True, если средний балл self выше.
        """
        if not isinstance(other, Student):
            # Если сравнивают не двух студентов — 
            # возвращаем специальное значение для Python
            return NotImplemented
        return self.average_grade() > other.average_grade()

    # ---------------------------------------------------------
    # Сравнение студентов по средним оценкам (меньше чем <)
    # ---------------------------------------------------------
    def __lt__(self, other: "Student") -> bool:
        """
        Сравнение студентов по средней оценке.
        Возвращает True, если средний балл self ниже.
        """
        if not isinstance(other, Student):
            return NotImplemented
        return self.average_grade() < other.average_grade()

    # ---------------------------------------------------------
    # Форматированный вывод информации о студенте
    # ---------------------------------------------------------
    def __str__(self):
        """
        При выводе print(student) показываем основную информацию:
        имя, фамилия, средняя оценка, курсы в процессе и завершённые.
        """
        return (
            f"Имя: {self.name}\n"
            f"Фамилия: {self.surname}\n"
            f"Средняя оценка за домашние задания: {self.average_grade():.2f}\n"
            f"Курсы в процессе изучения: {', '.join(self.courses_in_progress) or '—'}\n"
            f"Завершенные курсы: {', '.join(self.finished_courses) or '—'}\n"
        )

    # ---------------------------------------------------------
    # Подсчёт средней оценки всех студентов за все курсы
    # ---------------------------------------------------------
    @staticmethod
    def average_grade_all_students() -> float:
        """
        Статический метод, не привязан к конкретному студенту.
        Считает среднюю оценку по всем студентам и всем курсам.
        """
        # Собираем все оценки всех студентов в один общий список
        grades = [g for s in Student.all_students_list for gl in s.grades.values() for g in gl]

        # Возвращаем среднее значение (если список не пуст)
        return round(sum(grades) / len(grades), 2) if grades else 0.0
