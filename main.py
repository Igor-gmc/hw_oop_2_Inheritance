# Импортируем классы из пакета classes
from classes.student import Student
from classes.mentor import Reviewer, Lecturer


# -------------------------------------------------------------
# 1️⃣ СОЗДАНИЕ ЭКЗЕМПЛЯРОВ КЛАССОВ
# -------------------------------------------------------------
# Создаём 2-х лекторов (они будут получать оценки от студентов)
lecturer_1 = Lecturer('Иван', 'Иванов')
lecturer_2 = Lecturer('Семен', 'Семенков')

# Создаём 2-х проверяющих (они будут ставить оценки студентам)
reviewer_1 = Reviewer('Пётр', 'Петров')
reviewer_2 = Reviewer('Николай', 'Николаев')

# Создаём 2-х студентов
student_1 = Student('Алена', 'Алехина', 'Ж')
student_2 = Student('Василий', 'Васильев', 'М')

# -------------------------------------------------------------
# 2️⃣ ДОБАВЛЯЕМ КУРСЫ
# -------------------------------------------------------------
# Каждый студент имеет два списка курсов:
# - courses_in_progress — курсы, которые он проходит сейчас
# - finished_courses — курсы, которые он уже завершил

student_1.courses_in_progress += ['Python', 'Java']
student_1.finished_courses += ['Введение в программирование']

student_2.courses_in_progress += ['C++', 'Java']
student_2.finished_courses += ['Введение в программирование', 'Python']

# Преподаватели тоже должны быть "привязаны" к курсам.
# Только если курс совпадает у студента и преподавателя —
# они смогут обмениваться оценками (см. проверки в методах rate_hw и rate_lecture).
lecturer_1.courses_attached += ['Python', 'Java']
lecturer_2.courses_attached += ['C++', 'Java']

# Проверяющие тоже указывают, какие курсы они могут проверять
reviewer_1.courses_attached += ['Python', 'C++']
reviewer_2.courses_attached += ['Java', 'C++']


# -------------------------------------------------------------
# 3️⃣ ПРОВЕРЯЮЩИЕ СТАВЯТ ОЦЕНКИ СТУДЕНТАМ
# -------------------------------------------------------------
# reviewer.rate_hw(student, course, grade)
# Оценки ставятся только если:
#   - проверяющий прикреплён к этому курсу
#   - студент проходит этот курс
#   - grade в диапазоне 1–10

reviewer_1.rate_hw(student_1, 'Python', 10)
reviewer_1.rate_hw(student_1, 'Python', 5)
reviewer_2.rate_hw(student_1, 'Java', 8)
reviewer_2.rate_hw(student_1, 'Java', 10)

reviewer_1.rate_hw(student_2, 'C++', 9)
reviewer_2.rate_hw(student_2, 'Java', 10)
reviewer_2.rate_hw(student_2, 'Java', 10)
reviewer_2.rate_hw(student_2, 'C++', 7)

# После этого у студентов появляются словари оценок:
# student_1.grades → {'Python': [10, 5], 'Java': [8, 10]}
# student_2.grades → {'C++': [9, 7], 'Java': [10, 10]}


# -------------------------------------------------------------
# 4️⃣ СТУДЕНТЫ ОЦЕНИВАЮТ ЛЕКТОРОВ
# -------------------------------------------------------------
# student.rate_lecture(lecturer, course, grade)
# Студент может поставить оценку только если:
#   - он записан на этот курс
#   - лектор прикреплён к этому курсу
#   - оценка в диапазоне 1–10

student_1.rate_lecture(lecturer_1, 'Python', 7)  # ✅ студент проходит Python, лектор читает Python
student_1.rate_lecture(lecturer_1, 'Java', 8)    # ✅ совпадение по курсу
student_2.rate_lecture(lecturer_1, 'Java', 6)    # ✅ совпадение по курсу
student_2.rate_lecture(lecturer_2, 'Java', 9)    # ✅ совпадение по курсу
student_2.rate_lecture(lecturer_2, 'C++', 10)    # ✅ совпадение по курсу

# Если попытаться оценить курс, которого нет у одного из них → "Ошибка"
# (например, если бы студент_1 оценивал lecturer_1 по 'C++')


# -------------------------------------------------------------
# 5️⃣ СРАВНЕНИЕ ЛЕКТОРОВ
# -------------------------------------------------------------
# Теперь у каждого лектора есть оценки:
# lecturer_1.grades → {'Python': [7], 'Java': [8, 6]}
# lecturer_2.grades → {'Java': [9], 'C++': [10]}

print('\n=== Сравнение лекторов по средней оценке ===')
# Метод __gt__ возвращает True, если средняя lecturer_1 > lecturer_2
print(f"lecturer_1 > lecturer_2: {lecturer_1 > lecturer_2}")
print(f"lecturer_1 < lecturer_2: {lecturer_1 < lecturer_2}")
print(f"lecturer_1 == lecturer_2: {lecturer_1 == lecturer_2}")

# Пример:
# lecturer_1 average = (7 + 8 + 6) / 3 = 7.0
# lecturer_2 average = (9 + 10) / 2 = 9.5
# => lecturer_1 < lecturer_2 → True


# -------------------------------------------------------------
# 6️⃣ ВЫВОД СПИСКА СТУДЕНТОВ
# -------------------------------------------------------------
print('\n=== Список студентов ===')
for student in Student.all_students_list:
    # Вызывается __str__() у Student
    # Показывает имя, фамилию, среднюю оценку, текущие и завершённые курсы
    print(student)

# -------------------------------------------------------------
# 7️⃣ СРЕДНЯЯ ОЦЕНКА ВСЕХ СТУДЕНТОВ
# -------------------------------------------------------------
# Вызывается статический метод Student.average_grade_all_students()
# Он объединяет все оценки всех студентов и считает среднее.
print(f"\nСредняя оценка всех студентов: {Student.average_grade_all_students():.2f}")


# -------------------------------------------------------------
# 8️⃣ СРАВНЕНИЕ СТУДЕНТОВ
# -------------------------------------------------------------
# Сравнение по средней оценке за все курсы (__gt__ и __lt__)
print('\n=== Сравнение студентов ===')
print(f"student_1 > student_2: {student_1 > student_2}")
print(f"student_1 < student_2: {student_1 < student_2}")

# Пример:
# student_1 average = (10 + 5 + 8 + 10) / 4 = 8.25
# student_2 average = (9 + 7 + 10 + 10) / 4 = 9.0
# => student_1 < student_2 → True


# -------------------------------------------------------------
# 9️⃣ ВЫВОД ИНФОРМАЦИИ О ЛЕКТОРАХ
# -------------------------------------------------------------
print('\n=== Лекторы ===')
# Вызывается __str__() у Lecturer
print(lecturer_1)
print(lecturer_2)

# Вывод, например:
# Имя: Иван
# Фамилия: Иванов
# Средняя оценка за лекции: 7.00


# -------------------------------------------------------------
# 🔟 ВЫВОД ИНФОРМАЦИИ О ПРОВЕРЯЮЩИХ
# -------------------------------------------------------------
print('\n=== Проверяющие ===')
# Вызывается __str__() у Reviewer
print(reviewer_1)
print(reviewer_2)

# Пример:
# Имя: Пётр
# Фамилия: Петров
